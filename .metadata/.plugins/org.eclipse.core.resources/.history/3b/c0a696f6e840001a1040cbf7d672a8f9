package com.bridgelabz.utility;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Arrays;

import com.bridgelabz.algorithmprograms.BubbleSort;
import com.bridgelabz.algorithmprograms.DayOfWeek;
import com.bridgelabz.algorithmprograms.PrimeNumbers;
import com.bridgelabz.algorithmprograms.SumOfPowerOfTwo;
import com.bridgelabz.algorithmprograms.SwapNibbles;
import com.bridgelabz.algorithmprograms.SwitchProgram;
import com.bridgelabz.functionalprograms.FlipCoin;
import com.bridgelabz.functionalprograms.Gambler;
import com.bridgelabz.functionalprograms.HarmonicNumber;
import com.bridgelabz.functionalprograms.StringReplace;


public class Utility {

	public static void filpCoin(int n) {
		float j=0,k=0;
		   for(int i=0;i<n;i++)
		   {
			   
			   float z=(float)(Math.random()*2);
			   if(z<0.5)
			   {
				  j++;
			   }
			   else
			   {
				   k++;
			   }
		   }
		  float t=(float)((j/n)*100);
		  float h=(float)((k/n)*100);
		  FlipCoin.display(t, h);
	
	}
	public static void harmonicNumber(int number)
	{
		float harmonic=1f;
		 for(int i=2;i<=number;i++)
		  {
			  harmonic+=(float)1/i;
		  }
		 HarmonicNumber.display(number,harmonic);
	}
	
	public static int leapYear(int number)
	{
		 int k=number,j=0;
		   while(k!=0)
		   {
			   k=k/10;
			   j++;
		   }
		   if(j<4)
		   {
			   
			   j=2;
		   }
		   else
		   {
			   if(number%4==0)
			   {
				   if(number%100==0)
				   {
					   if(number%400==0)
					   {
						   j=1;
					   }
					   else
					   {
						  j=0;
					   }
				   }
				   else
				   {
					  j=1;
				   }
			   }
			   else
			   {
				   j=0; 
			   }
		   
		   }
		   return j;
	}
	
	public static void primeFactors(int number)
	{
		 int i;
		  while(number%2==0)
		  {
			  System.out.print("2 "); 
			  number=number/2;
		  }
		  for(i=3;i<=Math.sqrt(number);i++)
		  {
			 while(number%i==0)
			 {
				 System.out.print(i+" ");
				 number=number/i;
			 }
		  }
		  if(number>2)
		  {
			  System.out.println(number);
		  }
	}
	public static  void stringReplace(String str,String str1)
	{
		String str2=str.replace("<<UserName>>", str1);
		StringReplace.display(str2);
	}
	
	public static void gambler(int Stake1,int Goal,int Numberofgames)
	{
		int cash=Stake1;
		 float i,bets=0,win=0,loss=0;
			float k=0;
	            for(i=0;i<Numberofgames;i++)
	        {
	           
	            bets++;
	          k=(float)(Math.random()*1);
	          if(k>0.5)
	           {
	              cash++;
	              win++;
	           }
	          else
	           {
	              cash--;
	              loss++;
	           }
	          if(cash==0||cash==Goal)
	          {
	       	   break;
	          }
	         }
	       float winpercentage=((float)((win/bets)*100));
	       float losspercentage=((float)((loss/bets)*100));
	      Gambler.display(win,winpercentage,losspercentage);      
	        
	}
	public static int couponNumber(int number)
	{
		int []array=new int[number];
		int i,l=0;
		for(i=0;i<number;i++)
		{
			array[i]=l;
			l++;
		}
		int count=0,randomcount=0,j,k;
		while(count!=number)
		{
		  k=(int)(Math.random()*number);	
			for(j=0;j<number;j++)
			{
				if(array[j]==k)
				{
					array[j]=-1;
					count++;
				}
			}
			randomcount++;
		}
		return randomcount++;
	}
	public static void twoDArray(int row,int column)
	{
		int [][]array=new int[row][column];
		for(int i=0;i<row;i++)
		{
			for(int j=0;j<column;j++)
			{
				array[i][j]=UtilityScanner.integerInput();
			}
		}
		String fileName="2DArray.txt";
		PrintWriter writer=null;
		try
		{
			 writer=new PrintWriter(fileName);
		}
		catch(FileNotFoundException e)
		{
			e.printStackTrace();
		}
		for(int i=0;i<row;i++)
		{
			for(int j=0;j<column;j++)
			{
				writer.print(array[i][j]+" ");
			}
			writer.println();
		}
		writer.close();
	}
	
	public static int sumOfThree(int number)
	{
		int[]array=new int[number];
		int i;
		for(i=0;i<number-1;i++)
		{
			array[i]=UtilityScanner.integerInput();
		}
		Arrays.sort(array);
		  int count=0,x;
		 for(i=0;i<number-1;i++)
		 {
		     x=array[i];
			int j=i+1;
			int k=number-1;
		while(j<k)
		{
		   if(x+array[j]+array[k]==0)
		   {
			   System.out.println(x+" "+array[j]+" "+array[k]);
			   j++;
			   k--;
			   count++;
		   }
		   else if(x+array[j]+array[k]<0)
          {
        	  j++;
          }
		   else
		   {
			   k--;
		   }
		}
		 }
		return count;
		 
	}
	
 public static float euclideanDistance(float x,float y)
 {
	 float distance=(float)Math.sqrt(Math.pow(x, 2)+Math.pow(y, 2));
	 return distance;
 }
 public static void permutationOfStringIterative(String string)
 {
	 int k=string.length();
	 int[]p=new int[k];
	 int i;
	 for(i=0;i<k;i++)
	 {
		 p[i]=0;
	 }
	 System.out.print(string);
	 i=1;
	 int j=0;
	 while(i<k)
	 {
		 if(p[i]<i)
		 {
			 j=(i%2)*p[i];
			StringBuilder strB = new StringBuilder(string);
		      char l = strB.charAt(i) , r = strB.charAt(j);
		      strB.setCharAt(i,r);
		      strB.setCharAt(j,l);
			 System.out.print(" "+strB);
			 p[i]++;
			 i=1;
		 }
		 else
		 {
			 p[i]=0;
			 i++;
		 }
	 }
 }
 
 public static void permutationOfStringRecursive(String string,int lower,int higher)
 {
	 StringBuilder strB = new StringBuilder(string);
	 int j;
	 if(lower==higher)
	 {
		System.out.print(strB+" ");
	 }
	 else
	 {
		 for(j=lower;j<=higher;j++)
		 {
		      char l = strB.charAt(lower) , r = strB.charAt(j);
		      strB.setCharAt(lower,r);
		      strB.setCharAt(j,l);
		      String newval=strB.toString();
		      permutationOfStringRecursive(newval,lower+1,higher);
		      l = strB.charAt(lower) ; r = strB.charAt(j);
		      strB.setCharAt(lower,r);
		      strB.setCharAt(j,l);	 
		 }
	 }
 }
 
 
 public static double windChill(double temperature ,double windspeed)
 {
	 double weather=0;
	 if(temperature>50 ||windspeed>120||windspeed<3)
	 {
		 return weather;
	 }
	 else
	 {
		  weather = (double) (35.74 + (0.6215*temperature) + (0.4275*temperature - 35.75) * ((double)Math.pow(windspeed, 0.16)));
	 }
	 return weather;
 }
 
  public static int anagram(char char1[],int length1,char char2[],int length2)
  {
	  int count;
	  if(length1!=length2)
	  {
		  count=0;
	  }
	  else
	  {
		  int flag=0;
		  Arrays.sort(char1);
		  Arrays.sort(char2);
		  int i;
		  for(i=0;i<length1;i++)
		  {
			  if(char1[i]==char2[i])
			  {
				  flag++;
			  }
		  }
		  if(flag==length1)
		  {
			  count=length1;
		  }
		  else
		  {
			  count=0;
		  }
	  }
	  return count;
  }
  
  public static void primeNumbers()
  {
	  int count=0,flag;
	  int i=1,j,number=1000;
	  while(i<=number)
	  {
		  j=1;
		  flag=0;
		  while(j<=i)
		  {
			  if(i%j==0)
			  {
				  flag++;
			  }
			  j++;
		  }
		  if(flag==2)
		  {
			  count++;
		  }
		  i++;
	  }
	  int[] primearray=new int[count];
	  int k=0;
	  i=1;
	  while(i<=number)
	  {
		  j=1;
		  flag=0;
		  while(j<=i)
		  {
			  if(i%j==0)
			  {
				  flag++;
			  }
			  j++;
		  }
		  if(flag==2)
		  {
			  primearray[k]=i;
			  k++;
		  }
		  i++;
	  }
	  PrimeNumbers.display(primearray,count);
  }
 
  public static int switchProgram(int array[],int number,int number1)
  {
	 Arrays.sort(array);
	  int low=0,high=number-1,index=0;
	  int mid;
	  while(low<=high)
	  {
		  mid=(low+high)/2;
		  if(array[mid]==number1)
		  {
			  index=mid;
			  break;
		  }
		  else if(array[mid]<number1)
		  {
			  low=mid+1;
		  }
		  else
		  {
			  high=mid-1;
		  }
	  }
	return index;
    }
  
  
  public static void insertionSort(int array[],int number)
  {
	  int i,j,k;
      for(i=1;i<number;i++)
      {
          k=array[i];
          j=i-1;
          while(j>-1&&k<array[j])
          {
              array[j+1]=array[j];
              j--;
          }
          array[j+1]=k;
          
      }
      SwitchProgram.display(array, number);
  }
  public static void bubbleSort(int array[],int number)
  {
	  int i,j;
      for(i=0;i<number-1;i++)
      {
       for(j=i+1;j<number;j++)
       {
    	   if(array[i]>array[j])
    	   {
    		   int temp=array[i];
    		   array[i]=array[j];
    		   array[j]=temp;
    	   }
       }
      }
      SwitchProgram.display(array, number);
  }
  public static void bubbleSorting(int array[],int number)
  {
	  int i,j;
      for(i=0;i<number-1;i++)
      {
       for(j=i+1;j<number;j++)
       {
    	   if(array[i]>array[j])
    	   {
    		   int temp=array[i];
    		   array[i]=array[j];
    		   array[j]=temp;
    	   }
       }
      }
      BubbleSort.display(array, number);
  }
  
  public static void temperatureConversion(int option)
  {
	  float Celsius,fahrenheit;
	  float initialvalue=32;
	  switch (option)
      {
          case 1:
          {
              System.out.println("Enter the value of Celsius:");
              Celsius=UtilityScanner.floatInput();
              fahrenheit= (float) ((float)(Celsius*9.0)/5.0+initialvalue);
              System.out.println("Fahrenheit= "+fahrenheit);
              break;
          }
          case 2:
          {
        	  System.out.println("Enter the value of Fahrenheit:");
              fahrenheit=UtilityScanner.floatInput();
              Celsius= (float) (((float)(fahrenheit-initialvalue)*(5.0))/9.0);
             
              System.out.println("Celsius= "+Celsius);
              break;
          }
        default:
        {
           System.out.println("Enter option in bewteen 1 to 2 for the conversion:");
            break;
        }
      }
	  
  }
  
  
  public static double monthlyPayment(double personalloan ,int years ,double percent) 
  {
	  int number;
	  double rate;
	  number=(12*years);
	  rate=percent/(12*100);
    double Payment=(personalloan*rate)/(1-((double)Math.pow(1+rate,-number)));
    return Payment;
  }
  
  public static void quadraticRoots(int a,int b,int c)
  {
	  int d=b*b- 4*a*c;
	  double root1,root2;
	  double sqrtval=Math.sqrt(Math.abs(d));
	     if(d>0)
	     {
	         System.out.println("Roots are real and different:");
	         root1=(double)(-b+Math.sqrt(d))/(2*a);
	         root2=(double)(-b-Math.sqrt(d))/(2*a);
	         System.out.println("Root1="+root1);
	         System.out.println("Root2="+root2);
	     }
	     else if(d==0)
	     {
	         System.out.println("Roots are real and equal:");
	         root1=-(double)(b/2*a);
	         root2=-(double)(b/2*a);
	         System.out.println("Root1="+root1);
	         System.out.println("Root2="+root2);
	     }
	     else if(d<0)
	     {
	         System.out.println("root1="+(double)(-b/2*a)+"+i"+sqrtval/(2*a));
	         System.out.println("root1="+(double)(-b/2*a)+"-i"+sqrtval/(2*a));
	     }
	     
  }
  
  
  public static double squareRoot(double value)
  {
	  double epsilon = 1e-15; 
      double t = value;              

      
      while (Math.abs(t - value/t) > epsilon*t) 
      {
          t = (value/t + t) / 2.0;
      }
      return t; 
  }
  
  public static void dayOfWeek(int day,int month,int year)
  {
	  int y0=0,x,m0=0,d0=0;
	  String[] stringday=new String[7];
	  String[] stringmonth=new String[13];
	  stringday[0]="Sunday";stringday[1]="Monday";stringday[2]="Tuseday";stringday[3]="Wednesday";stringday[4]="Thursday";stringday[5]="Friday";stringday[6]="Saturday";
	  stringmonth[1]="January";stringmonth[2]="Febrary";stringmonth[3]="March";stringmonth[4]="April";stringmonth[5]="May";stringmonth[6]="June";
	  stringmonth[7]="July";stringmonth[8]="August";stringmonth[9]="Sepetember";stringmonth[10]="October";stringmonth[11]="November";stringmonth[12]="December";
      if((day<1||day>31)||(month<1||month>12)||(year<-10000)||(year>10000))
      {
          d0=0;
      }
      else
      {
           y0 = year - (14 - month) / 12;
         x = y0 + y0/4 - y0/100 +y0/400;
         m0 = month + 12 * ((14 - month) / 12) - 2;
         d0 = (day + x + 31 * m0 / 12) % 7;
    
      }
     if(d0==0)
     {
    	 System.out.println("Enter the valid date,month and year:");
     }
     else
     {
    	 DayOfWeek.display(stringday[d0],stringmonth[month],y0+1);
     }
  }
  
  
  
  public static void swapNibbles(int decimalvalue)
  {
	  int []array1=new int[4];
	  int []array2=new int[4];
	  int i;
      for(i=0;i<4;i++)
      {
          array1[i]=0;
          array2[i]=0;
      }
      int reminder;
      for(i=3;i>=0&&decimalvalue!=0;i--)
      {
    	  reminder=decimalvalue%2;
          array1[i]=reminder;
          decimalvalue=decimalvalue/2;
      }
      for(i=3;i>=0&&decimalvalue!=0;i--)
      {
    	  reminder=decimalvalue%2;
          array2[i]=reminder;
          decimalvalue=decimalvalue/2;
      }
      int sum=0,j=0;
      for(i=3;i>=0;i--)
      {
          sum=sum+((int)Math.pow(2,j)*array2[i]);
          j++;
      }
      for(i=3;i>=0;i--)
      {
          sum=sum+((int)Math.pow(2,j)*array1[i]);
          j++;
      }
      int flag=0;
      int poweroftwo;
      int n=sum;
      while(n!=1)
      {
    	  reminder=n%2;
    	  if(reminder==1)
    	  {
    		  flag++;
    	  }
    	  n=n/2;
      }
      if(flag==0)
      {
    	  poweroftwo=1;
      }
      else
      {
    	  poweroftwo=0; 
      }
      SwapNibbles.display(sum,poweroftwo);
      
  }
  
  
  public static void sumOfPowerOfTwo(int decimalvalue)
  {
	  int size=0;
	  int n=decimalvalue;
	  while(n!=0)
	  {
		  n=n/2;
		  size++;
	  }
	  int[] array=new int[size];
	  int reminder=0,i=0;
	  while(decimalvalue!=0)
	  {
		  reminder=decimalvalue%2;
		  array[i]=reminder;
		  decimalvalue=decimalvalue/2;
		  i++;
	  }
	  SumOfPowerOfTwo.display(array,size);
  }
  
  
  
  public static void vendingMachine(int value)
  {
	  int []array=new int[8];
	  array[0]=1;array[1]=2;array[2]=5;array[3]=10;array[4]=50;array[5]=100;array[6]=500;array[7]=1000;
	  int notes=0,i=7,quotient=0;
	  while(i>=0&&value>0)
      {
          quotient=value/array[i];
          
          if(quotient>0)
          {
            System.out.println(array[i]+"="+quotient);;  
            value=value%array[i];
            i--;
            notes++;
          }
          else
          {
              i--;
          }
      }
		 System.out.println("Number of notes="+notes);
		 
  }
  
  
  
}

